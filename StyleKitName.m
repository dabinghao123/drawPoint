//
//  StyleKitName.m
//  ProjectName
//
//  Created by AuthorName on 15/11/11.
//  Copyright (c) 2015 CompanyName. All rights reserved.
//
//  Generated by PaintCode (www.paintcodeapp.com)
//

#import "StyleKitName.h"


@implementation StyleKitName

#pragma mark Initialization

+ (void)initialize
{
}

//// In trial version of PaintCode, the code generation is limited to one canvas

#pragma mark Drawing Methods

//// PaintCode Trial Version
//// www.paintcodeapp.com

+ (void)drawCanvas2WithFrame: (CGRect)frame value: (CGFloat)value
{
    
    CGContextRef context = UIGraphicsGetCurrentContext();
    //// Color Declarations
    UIColor* strokeColor = [UIColor colorWithRed: 0.552 green: 0.58 blue: 0.624 alpha: 1];
    UIColor* fillColor = [UIColor colorWithRed: 1 green: 1 blue: 1 alpha: 1];
    
    //// Variable Declarations
    CGFloat expression = -230 * value;
    
    //// gauge
    {
        //// oval35 Drawing
        UIBezierPath* oval35Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(CGRectGetMinX(frame) + 126, CGRectGetMinY(frame) + 97, 100, 100)];
        [fillColor setFill];
        [oval35Path fill];
        [strokeColor setStroke];
        oval35Path.lineWidth = 2;
        [oval35Path stroke];
        
        //// oval36 Drawing
        UIBezierPath* oval36Path = [UIBezierPath bezierPath];
        [oval36Path moveToPoint: CGPointMake(CGRectGetMinX(frame) + 140.49, CGRectGetMinY(frame) + 167.5)];
        [oval36Path addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 155.5, CGRectGetMinY(frame) + 111.49) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 129.17, CGRectGetMinY(frame) + 147.89) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 135.89, CGRectGetMinY(frame) + 122.81)];
        [oval36Path addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 211.51, CGRectGetMinY(frame) + 126.5) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 175.11, CGRectGetMinY(frame) + 100.17) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 200.19, CGRectGetMinY(frame) + 106.89)];
        [oval36Path addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 211.51, CGRectGetMinY(frame) + 167.5) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 218.83, CGRectGetMinY(frame) + 139.19) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 218.83, CGRectGetMinY(frame) + 154.81)];
        [oval36Path addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 199.38, CGRectGetMinY(frame) + 160.5)];
        [oval36Path addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 199.38, CGRectGetMinY(frame) + 133.5) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 204.21, CGRectGetMinY(frame) + 152.15) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 204.21, CGRectGetMinY(frame) + 141.85)];
        [oval36Path addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 162.5, CGRectGetMinY(frame) + 123.62) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 191.93, CGRectGetMinY(frame) + 120.59) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 175.41, CGRectGetMinY(frame) + 116.16)];
        [oval36Path addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 152.62, CGRectGetMinY(frame) + 160.5) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 149.59, CGRectGetMinY(frame) + 131.07) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 145.16, CGRectGetMinY(frame) + 147.59)];
        [oval36Path addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 140.49, CGRectGetMinY(frame) + 167.5)];
        [oval36Path closePath];
        [strokeColor setStroke];
        oval36Path.lineWidth = 2;
        [oval36Path stroke];
        
        
        //// bezier71 Drawing
        UIBezierPath* bezier71Path = [UIBezierPath bezierPath];
        [bezier71Path moveToPoint: CGPointMake(CGRectGetMinX(frame) + 176, CGRectGetMinY(frame) + 113)];
        [bezier71Path addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 176, CGRectGetMinY(frame) + 106)];
        [strokeColor setStroke];
        bezier71Path.lineWidth = 2;
        [bezier71Path stroke];
        
        
        //// gaugeArrow
        {
            //// bezier57 Drawing
            CGContextSaveGState(context);
            CGContextTranslateCTM(context, CGRectGetMinX(frame) + 176, CGRectGetMinY(frame) + 147);
            CGContextRotateCTM(context, -(expression - 137.967360127) * M_PI / 180);
            
            UIBezierPath* bezier57Path = [UIBezierPath bezierPath];
            [bezier57Path moveToPoint: CGPointMake(-4.55, -5.63)];
            [bezier57Path addLineToPoint: CGPointMake(3.84, -2.85)];
            [bezier57Path addLineToPoint: CGPointMake(12.85, 1.2)];
            [bezier57Path addLineToPoint: CGPointMake(38.95, 9.85)];
            [bezier57Path addLineToPoint: CGPointMake(41.77, 13.94)];
            [bezier57Path addLineToPoint: CGPointMake(37.13, 15.55)];
            [bezier57Path addLineToPoint: CGPointMake(11.04, 6.9)];
            [bezier57Path addLineToPoint: CGPointMake(1.42, 4.76)];
            [bezier57Path addLineToPoint: CGPointMake(-6.97, 1.98)];
            [bezier57Path addLineToPoint: CGPointMake(-4.55, -5.63)];
            [bezier57Path closePath];
            bezier57Path.lineJoinStyle = kCGLineJoinRound;
            
            [fillColor setFill];
            [bezier57Path fill];
            [strokeColor setStroke];
            bezier57Path.lineWidth = 2;
            [bezier57Path stroke];
            
            CGContextRestoreGState(context);
            
            
            //// oval37 Drawing
            UIBezierPath* oval37Path = [UIBezierPath bezierPath];
            [oval37Path moveToPoint: CGPointMake(CGRectGetMinX(frame) + 178.72, CGRectGetMinY(frame) + 152.35)];
            [oval37Path addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 170.65, CGRectGetMinY(frame) + 149.72) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 175.77, CGRectGetMinY(frame) + 153.85) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 172.16, CGRectGetMinY(frame) + 152.68)];
            [oval37Path addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 173.28, CGRectGetMinY(frame) + 141.65) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 169.15, CGRectGetMinY(frame) + 146.77) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 170.32, CGRectGetMinY(frame) + 143.16)];
            [oval37Path addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 181.35, CGRectGetMinY(frame) + 144.28) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 176.23, CGRectGetMinY(frame) + 140.15) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 179.84, CGRectGetMinY(frame) + 141.32)];
            [oval37Path addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 178.72, CGRectGetMinY(frame) + 152.35) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 182.85, CGRectGetMinY(frame) + 147.23) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 181.68, CGRectGetMinY(frame) + 150.84)];
            [oval37Path closePath];
            oval37Path.miterLimit = 4;
            
            [fillColor setFill];
            [oval37Path fill];
            [strokeColor setStroke];
            oval37Path.lineWidth = 2;
            [oval37Path stroke];
        }
        
        
        //// bezier70 Drawing
        UIBezierPath* bezier70Path = [UIBezierPath bezierPath];
        [bezier70Path moveToPoint: CGPointMake(CGRectGetMinX(frame) + 135, CGRectGetMinY(frame) + 147)];
        [bezier70Path addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 142, CGRectGetMinY(frame) + 147)];
        [bezier70Path moveToPoint: CGPointMake(CGRectGetMinX(frame) + 210, CGRectGetMinY(frame) + 147)];
        [bezier70Path addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 217, CGRectGetMinY(frame) + 147)];
        [strokeColor setStroke];
        bezier70Path.lineWidth = 2;
        [bezier70Path stroke];
        
        
        //// bezier72 Drawing
        UIBezierPath* bezier72Path = [UIBezierPath bezierPath];
        [bezier72Path moveToPoint: CGPointMake(CGRectGetMinX(frame) + 200.04, CGRectGetMinY(frame) + 122.96)];
        [bezier72Path addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 204.99, CGRectGetMinY(frame) + 118.01)];
        [strokeColor setStroke];
        bezier72Path.lineWidth = 2;
        [bezier72Path stroke];
    }
    
    
    // Trial version of PaintCode only generates code for the first 5 shapes.
}

@end
